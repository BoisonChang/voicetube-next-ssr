import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.scss";
import { useEffect, useState } from "react";
import Navbar from "@/components/Navbar/navbar";
import { FilterType } from "@/types/components";
import { myLoader } from "@/helper/img";
import Preview from "@/components/Preview/preview";
import { GetServerSideProps, GetServerSidePropsContext } from "next";
import { VideoPropsType, VideoItemType } from "@/types/request";
import axios from "axios";

const inter = Inter({ subsets: ["latin"] });

export const getServerSideProps: GetServerSideProps<VideoPropsType> = async (
  context: GetServerSidePropsContext
) => {
  try {
    const response = await axios.get(
      "https://us-central1-lithe-window-713.cloudfunctions.net/frontendQuiz"
    );
    const data = response.data;
    const videos = data.data.map((video: VideoItemType) => {
      return {
        ...video,
        publishedAt: new Date(video.publishedAt).toISOString(),
      };
    });
    return {
      props: {
        data: {
          status: data.status || 0,
          data: {
            videos: videos,
          },
        },
      },
    };
  } catch (err) {
    return {
      notFound: true,
    };
  }
};

export default function Home({ data }: VideoPropsType) {
  const [filterCategories, setFilterCategories] = useState<FilterType[]>([
    { id: 1, name: "發布時間" },
    { id: 2, name: "觀看次數" },
    { id: 3, name: "收藏次數" },
  ]);

  const [filterLength, setFilterLength] = useState<FilterType[]>([
    { id: 1, name: "不限" },
    { id: 2, name: "4分鐘以下" },
    { id: 3, name: "5 - 10 分鐘" },
    { id: 4, name: "超過10 分鐘" },
  ]);

  const [videos, setVideos] = useState<VideoItemType[]>([]);
  useEffect(() => {
    if (data) {
      setVideos(data.data.videos);
    }
  }, [data]);

  const [activeFilterCategory, setActiveFilterCategory] = useState<number>(0);
  const [activeFilterLength, setActiveFilterLength] = useState<number>(0);

  const handleClick = (filterId: number, type: "category" | "length") => {
    switch (type) {
      case "category":
        setActiveFilterCategory(filterId);
        break;
      case "length":
        setActiveFilterLength(filterId);
        break;
      default:
        break;
    }
  };

  return (
    <>
      <Head>
        <title>Voicetube App</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="manifest" href="/manifest.json" />
      </Head>
      <main className={styles.main}>
        <nav className={styles.nav}>
          <div className={styles.filter_list}>
            <div className={`${styles.filter_item} ${styles.filter_title}`}>
              排序
            </div>
            <Navbar
              filters={filterCategories}
              activeFilter={activeFilterCategory}
              handleClick={(filterId) => handleClick(filterId, "category")}
            />
          </div>
          <div className={styles.filter_list}>
            <div className={`${styles.filter_item} ${styles.filter_title}`}>
              長度
            </div>
            <Navbar
              filters={filterLength}
              activeFilter={activeFilterLength}
              handleClick={(filterId) => handleClick(filterId, "length")}
            />
          </div>
        </nav>
        <div className={styles.content}>
          {videos.map((video: VideoItemType) => (
            <Preview key={video.id} video={video} />
          ))}
        </div>
      </main>
    </>
  );
}
